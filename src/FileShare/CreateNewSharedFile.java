package FileShare;

import Chat.SharedFile;
import Chat.Monitor;
import Chat.ShowWaitAction;
import Chat.Tool;
import java.awt.Color;
import java.awt.Component;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.ScrollPaneConstants;
import javax.swing.SwingUtilities;


/**This class creates a GUI for create a shared file.
 * It will fill newSharedFile variable and wait for dispose from creater of this instance.
*/
public class CreateNewSharedFile extends javax.swing.JFrame
{


    JFileChooser fileChooser;
    DefaultListModel dlm;
    boolean isFileSelected = false;
    public SharedFile newSharedFile;
    private String ownerNick;
    private String ownerIp;
    private String ownerPort;
    private File[] selectedFiles ;
    private ArrayList<File> selectedFileList;
    private FileServer root;
    private long allSize = 0;
    CreateNewSharedFile me = null;
    
    
    
    /**
     * Creates new form CreateNewSharedFile
     */

    public CreateNewSharedFile(FileServer root, String ownerNick, String ownerIp, String ownerPort)
    {

        initComponents();
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }

            }

        }

        catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Monitor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        
        
        this.root = root;
        this.ownerIp = ownerIp;
        this.ownerNick = ownerNick;
        this.ownerPort = ownerPort;
        this.selectedFileList = new ArrayList<>();
        
        list_SelectedItems.setCellRenderer(new SelectedListCellRenderer());
        jScrollPane2.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
    }
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txt_NameOfShare = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtArea_ShareNote = new javax.swing.JTextArea();
        btn_SelectFile = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        list_SelectedItems = new javax.swing.JList<>();
        btn_Share = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txt_parentFolder = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        lbl_Size = new javax.swing.JLabel();

        setTitle("Create New Shared File");
        setResizable(false);

        jLabel1.setText("Name Of Share   :");

        txt_NameOfShare.setToolTipText("Name of the share");
        txt_NameOfShare.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_NameOfShareKeyTyped(evt);
            }
        });

        jLabel2.setText("Share Note          :");

        txtArea_ShareNote.setColumns(20);
        txtArea_ShareNote.setLineWrap(true);
        txtArea_ShareNote.setRows(5);
        txtArea_ShareNote.setToolTipText("Your note about sharing");
        txtArea_ShareNote.setWrapStyleWord(true);
        jScrollPane1.setViewportView(txtArea_ShareNote);

        btn_SelectFile.setText("Press to Select A File Or A Folder");
        btn_SelectFile.setToolTipText("Selected files or selected folder");
        btn_SelectFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_SelectFileActionPerformed(evt);
            }
        });

        jLabel3.setText("Selected Item      :");

        list_SelectedItems.setToolTipText("Shared Files Or Folder");
        list_SelectedItems.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane2.setViewportView(list_SelectedItems);

        btn_Share.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        btn_Share.setText("Share");
        btn_Share.setEnabled(false);
        btn_Share.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ShareActionPerformed(evt);
            }
        });

        jLabel5.setText("Folder                     :");

        txt_parentFolder.setEditable(false);

        jLabel6.setText("Size (KB)       :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_Share, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(17, 17, 17)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE)
                            .addComponent(btn_SelectFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txt_parentFolder)
                            .addComponent(lbl_Size, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txt_NameOfShare, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txt_NameOfShare, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_SelectFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_parentFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 198, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbl_Size, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10)
                .addComponent(btn_Share, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents




    /**
     * Opens a File chooser dialog to select files to share.
     * If user selects directories selects all files on selected folders
     * If user selects files selects just this files
     * Then adds it to lists.
     * @param evt 
     */
    private void btn_SelectFileActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btn_SelectFileActionPerformed

    {//GEN-HEADEREND:event_btn_SelectFileActionPerformed
        me = this;
        
        
        new Thread(new Runnable()
        {
            @Override
            public void run()
            {
                fileChooser = new JFileChooser();
                fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
                fileChooser.setMultiSelectionEnabled(true);
                fileChooser.setApproveButtonText("Select");
                //fileChooser.setSelectedFiles(new File("C:\\Users\\ZENCİ\\Desktop\\coppy this file\\").listFiles());
                int selection = fileChooser.showDialog(me, "Select");

                if(selection == JFileChooser.APPROVE_OPTION)
                {
                    
                    
                    isFileSelected = false;
                    lbl_Size.setText("");
                    txt_parentFolder.setText("");
                    dlm = new DefaultListModel();
                    selectedFileList = new ArrayList<>();
                    setShareButtonState();
                    
                    
                    selectedFiles = fileChooser.getSelectedFiles();
                    
                    
                    ShowWaitAction action = new ShowWaitAction("WaitAction", CreateNewSharedFile.this,"Searching Files","Selecting available files...", new Runnable() {
                        @Override
                        public void run() {
                           CreateNewSharedFile.this.allSize = CreateNewSharedFile.this.fillDlm(selectedFiles);
                           CreateNewSharedFile.this.fillSelectedFileArr();
                        }
                    });
                    action.actionPerformed(null);
                    list_SelectedItems.setModel(dlm);
                    list_SelectedItems.repaint();
                    list_SelectedItems.revalidate();
                    System.out.println("Found "+selectedFileList.size()+" file with size : " + allSize+" byte.");
                    if(selectedFiles.length > 1)
                    {
                        txt_parentFolder.setText(fileChooser.getSelectedFile().getParent());
                    }else
                    {
                        if(fileChooser.getSelectedFile().isDirectory())
                        {
                            txt_parentFolder.setText(fileChooser.getSelectedFile().toPath().toString());
                        }else {
                            txt_parentFolder.setText(fileChooser.getSelectedFile().getParent());
                        }
                    }
                    lbl_Size.setText(Tool.byteToMb(allSize)+" (MB) ");
                    isFileSelected = true;
                }
                setShareButtonState();
            }
        }).start();
    }//GEN-LAST:event_btn_SelectFileActionPerformed


    /**
     * If user not enters a share name it will not available to create file.
     * @param evt 
     */
    private void txt_NameOfShareKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_txt_NameOfShareKeyTyped

    {//GEN-HEADEREND:event_txt_NameOfShareKeyTyped
        SwingUtilities.invokeLater(new Runnable()
        {
            @Override
            public void run()
            {
                setShareButtonState();
            }
        });
    }//GEN-LAST:event_txt_NameOfShareKeyTyped


    /**
     * Creates a new shared file with needed values.
     * Changes the old shared file to new one.
     * The values not will be checked.
     * @param evt 
     */
    private void btn_ShareActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btn_ShareActionPerformed

    {//GEN-HEADEREND:event_btn_ShareActionPerformed
        
            Calendar cal = Calendar.getInstance();
            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");


            newSharedFile = new SharedFile( txt_NameOfShare.getText(),
                                            txt_parentFolder.getText(),
                                            txtArea_ShareNote.getText(),
                                            ""+allSize,
                                            ownerNick,
                                            ownerIp,
                                            ownerPort,
                                            sdf.format(cal.getTime()),
                                            selectedFiles);


            root.mySharedFiles.add(newSharedFile);
        

    }//GEN-LAST:event_btn_ShareActionPerformed



    
    /**
     * Returns the given directories size by byte.
     * @param file
     * @return 
     */
    public long getDirectorySize(File file)
    {
        long size = 0;


        if(!file.isDirectory())
        {
           size = file.length(); 
        }else
        {
            File[] innerFiles = file.listFiles();
            for (File innerFile : innerFiles) {
                size += getDirectorySize(innerFile);
            }
        }

        return size;

    }

    

    
    /**
      * Selects all files on given directories or files.
      * @param selectedFiles
      * @return total size of all selected files.
      */
    private long fillDlm(File[] selectedFiles)
    {
        
        long size = 0;
        for (File file : selectedFiles) {
                if(file.isDirectory())
                {
                    //System.out.println("Reqursive Search Found Directory : "+file.getPath());
                    size += fillDlm(file.listFiles());
                }else if(file.isFile())
                {
                    
                    //System.out.println("Reqursive Search Found file : "+file.getPath());
                    dlm.addElement(""+file.getName());
                   selectedFileList.add(file);
                   size += getDirectorySize(file);
                }   
            }



    return size;
            
    }

    
    /**
     * Fills the selectedFiles array with selectedFileList.
     */
    private void fillSelectedFileArr()
    {
        selectedFiles = new File[selectedFileList.size()];
        for (int i = 0; i< selectedFiles.length; i++) {
            selectedFiles[i] = selectedFileList.get(i);
        }
    }

    

    public SharedFile getNewSharedFile()
    {
        return newSharedFile;
    }

    
    /**
     * Checks and sets the edit buttons state.
     */
    private void setShareButtonState()
    {
        if(txt_NameOfShare.getText().isEmpty() || !isFileSelected)
        {
            btn_Share.setEnabled(false);
        }else
        {
            btn_Share.setEnabled(true);
        }
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_SelectFile;
    private javax.swing.JButton btn_Share;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbl_Size;
    private javax.swing.JList<String> list_SelectedItems;
    private javax.swing.JTextArea txtArea_ShareNote;
    private javax.swing.JTextField txt_NameOfShare;
    private javax.swing.JTextField txt_parentFolder;
    // End of variables declaration//GEN-END:variables

}



    class SelectedListCellRenderer extends DefaultListCellRenderer {
     @Override
     public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
        Component c = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
        
        c.setBackground(new Color(200,242,187));
         
        return c;
     }
    }