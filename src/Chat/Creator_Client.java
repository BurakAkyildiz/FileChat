package Chat;

import static Chat.FileChatConstants.USER_NAME_LENGTH_LIMIT;
import static Chat.FileChatConstants.USER_REQUEST_TYPE_SHARED_FILE_LIST;
import FileShare.FileServer;
import com.sun.glass.events.KeyEvent;
import java.awt.Component;
import java.awt.Window;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JRootPane;

/**
 *This class creates connection to a server with using GUI.
 * @author Burak
 */
public class Creator_Client extends javax.swing.JDialog {

    Component root;
    /**
     * Creates new form Creator_Client
     */
    public Creator_Client(Component root) {
        
        super((Window)root);
        initComponents();
        
        super.setLocationRelativeTo(root);
        super.setModal(true);
        super.setModalityType(ModalityType.APPLICATION_MODAL);
        this.root = root;
        txt_name.setDocument(Tool.getJTextFieldLimit(USER_NAME_LENGTH_LIMIT));
        setup();
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txt_Ip = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txt_port = new javax.swing.JFormattedTextField();
        jLabel3 = new javax.swing.JLabel();
        txt_name = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txt_filePort = new javax.swing.JFormattedTextField();
        btn_Connect = new javax.swing.JButton();
        prg_connect = new javax.swing.JProgressBar();

        setTitle("Connect a Server");
        setResizable(false);

        jLabel1.setText("Server IP :");

        txt_Ip.setNextFocusableComponent(txt_port);
        txt_Ip.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_portKeyTyped(evt);
            }
        });

        jLabel2.setText("Server Port :");

        txt_port.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txt_port.setNextFocusableComponent(txt_name);
        txt_port.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_portKeyTyped(evt);
            }
        });

        jLabel3.setText("Your Name :");

        txt_name.setNextFocusableComponent(txt_filePort);
        txt_name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_portKeyTyped(evt);
            }
        });

        jLabel4.setText("Your File Port :");

        txt_filePort.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txt_filePort.setNextFocusableComponent(btn_Connect);
        txt_filePort.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_portKeyTyped(evt);
            }
        });

        btn_Connect.setText("Connect");
        btn_Connect.setNextFocusableComponent(txt_Ip);
        btn_Connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ConnectActionPerformed(evt);
            }
        });

        prg_connect.setMaximum(10000);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(prg_connect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txt_port, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
                            .addComponent(txt_Ip))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txt_filePort, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
                            .addComponent(txt_name))
                        .addGap(0, 2, Short.MAX_VALUE))
                    .addComponent(btn_Connect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                            .addComponent(txt_Ip, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_port, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_name, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_filePort, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(10, 10, 10)
                .addComponent(btn_Connect, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(prg_connect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_ConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ConnectActionPerformed
        if(btn_Connect.getText().equalsIgnoreCase("Connect"))
        {

            if(!disconnect())
            return;

            String ip = "";
            int chatPort = 0;
            int filePort = 0;

            ip = txt_Ip.getText().trim();
            if(ip == null || ip.isEmpty())
            {
                JOptionPane.showMessageDialog(this,"Please enter the ip adress !","No IP !",JOptionPane.WARNING_MESSAGE );
                return;
            }

            FileChat.monitor.isRemoteConnection = Tool.isIpRemote(ip);
            String chatPortStr = txt_port.getText();
            String filePortStr = txt_filePort.getText();
            if(chatPortStr == null || chatPortStr.isEmpty())
            {
                JOptionPane.showMessageDialog(this,"Please enter the port !","No PORT !",JOptionPane.WARNING_MESSAGE );
                return;
            }

            String name = txt_name.getText();
            if(name == null || name.isEmpty())
            {
                JOptionPane.showMessageDialog(this,"Please enter your name !","No NAME !",JOptionPane.WARNING_MESSAGE );
                return;
            }

            try {
                chatPort = Integer.parseInt(chatPortStr);
                filePort = Integer.parseInt(filePortStr);
            }
            catch (Exception e) {
                System.err.println("Parse error @PORT INPUT");
            }

            connectServer(ip,chatPort,filePort,name.replaceAll(" ", "_"));
            
        }else
        {
            disconnect();
        }
    }//GEN-LAST:event_btn_ConnectActionPerformed

    private void txt_portKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_portKeyTyped
        if(evt.getKeyChar() == KeyEvent.VK_ENTER)
            btn_Connect.doClick();
    }//GEN-LAST:event_txt_portKeyTyped


    static int maxValue = 50;
    static boolean isCreated = false;
    /**Connects the server with given values.
     * Checks the connection type by ip.
     * If its a local connection checks the own file port if ist in use or not.
     * If its a remote connection checks the own file port on router if its opened or not.
     * If ports and server values available starts the client.
     * @param ip Server ip
     * @param chatPort Server chat port
     * @param filePort Own file port
     * @param name own user name
     */
    public void connectServer(String ip,int chatPort,int filePort,String name)
    {
        
        btn_Connect.setText("Disconnect");
        txt_Ip.setEnabled(false);
        txt_name.setEnabled(false);
        txt_port.setEnabled(false);
        txt_filePort.setEnabled(false);
        
        new Thread(new Runnable()
        {
            @Override
            public void run()
            {
                while(Creator_Client.this.prg_connect.getValue() < prg_connect.getMaximum())
                    {
                    try {
                        
                        if(Creator_Client.this.prg_connect.getValue() < maxValue)
                            Creator_Client.this.prg_connect.setValue(Creator_Client.this.prg_connect.getValue()+53);
                        
                            Thread.sleep(5L);
                    }
                    catch (Exception ex) {
                        Logger.getLogger(Monitor.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }).start();
        
        new Thread(new Runnable()
        {
            @Override
            public void run()
            {
                maxValue = 1500;
                
                int result = 0;
                result = Tool.isAvailablePort(Tool.IPCheck().get(0) ,filePort);
                if(Tool.SOCKET_IN_USE == result)
                {
                    JOptionPane.showMessageDialog(Creator_Client.this,"File Port "+filePort+" Is Using By Another Program.. ","PORT In USE",JOptionPane.WARNING_MESSAGE );
                    setup();
                    return;
                }else if(Tool.SOCKET_NOT_AVAILABLE == result)
                {
                    JOptionPane.showMessageDialog(Creator_Client.this,"File Port "+filePort+" Is Not available For Remote Connect To Your Device ","PORT Is Not Available",JOptionPane.WARNING_MESSAGE );
                    setup();
                    return;
                }
                maxValue = 4000;
                if(ip != null && !ip.isEmpty())
                {
                    try {
                        btn_Connect.setEnabled(false);
                        if(FileChat.monitor.sv != null || FileChat.monitor.cl != null)
                        {
                            FileChat.monitor.disconnect();
                            FileChat.monitor.setup();
                        }
                        maxValue = 5250;
                        try {
                            FileChat.monitor.cl = new Client(ip,chatPort,filePort,name);
                        }
                        catch (Exception e) { btn_Connect.setEnabled(true);}
                        
                        maxValue = 7800;
                        FileChat.monitor.fileSv = new FileServer(FileChat.monitor.cl.cName,FileChat.monitor.cl.cIp,""+FileChat.monitor.cl.uploadPort);
                        FileChat.monitor.cl.sendRequestMessage(USER_REQUEST_TYPE_SHARED_FILE_LIST, "");
                        maxValue = 8860;
                        FileChat.monitor. setMonitorTitle(FileChat.monitor.cl.cName);
                        maxValue = 9000;
                        isCreated = true;
                        btn_Connect.setEnabled(true);
                        maxValue = 10000;
                        Creator_Client.this.setVisible(false);
                    }catch (Exception ex) {
                        JOptionPane.showMessageDialog(Creator_Client.this, "Could not connected to : "+ip+" : "+chatPort);
                        FileChat.monitor.disconnect();
                        setup();
                    }
                }
            }
        }).start();
        
        maxValue = 10000;
    }
    
    /**
     * Disonnects from connected server and runs setup.
     * @return 
     */
    private boolean disconnect()
    {
        if(FileChat.monitor.askAndDisconnect())
        {
           setup();
           return true;
        }
        return false;
    }
    
    /**
     * Setting up for GUI's start position.
     */
    public void setup()
    {
        btn_Connect.setText("Connect");
        btn_Connect.setEnabled(true);
        txt_Ip.setEnabled(true);
        txt_name.setEnabled(true);
        txt_port.setEnabled(true);
        txt_filePort.setEnabled(true);
        prg_connect.setValue(0);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Connect;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JProgressBar prg_connect;
    private javax.swing.JTextField txt_Ip;
    private javax.swing.JFormattedTextField txt_filePort;
    private javax.swing.JTextField txt_name;
    private javax.swing.JFormattedTextField txt_port;
    // End of variables declaration//GEN-END:variables
}
